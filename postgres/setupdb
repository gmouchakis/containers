#!/bin/bash

Green='\e[0;32m'        # Green
Yellow='\e[0;33m'       # Yellow
Reset='\e[0m'           # Text Reset

info_msg () {
  echo -n -e $Yellow
  echo -n $@
  echo -e $Reset
}

success_msg () {
  echo -n -e $Green
  echo -n $@
  echo -e $Reset
}

info_msg "Start postgresql server in background"
/usr/pgsql-9.4/bin/postgres -D /var/lib/pgsql/9.4/data &
postgres_pid=$!

success_msg "Started postgresql server ($postgres_pid)"

info_msg 'wait 5sec for postgresql server to become ready...'
sleep 5

info_msg 'Provide a password for default user (postgres)'
psql -c "ALTER USER postgres WITH PASSWORD 'postgres';"

info_msg 'Create the spatial database that will be used as a template'
createdb -E UTF8 -T template0 template_postgis

info_msg 'Load the PostGIS SQL routines'
postgis='/usr/pgsql-9.4/share/contrib/postgis-2.1'
psql -d template_postgis -f $postgis/postgis.sql
psql -d template_postgis -f $postgis/spatial_ref_sys.sql

info_msg 'Allow users to alter spatial tables'
psql -d template_postgis -c "GRANT ALL ON geometry_columns TO PUBLIC;"
psql -d template_postgis -c "GRANT ALL ON geography_columns TO PUBLIC;"
psql -d template_postgis -c "GRANT ALL ON spatial_ref_sys TO PUBLIC;"

info_msg 'Perform garbage collection'
psql -d template_postgis -c "VACUUM FULL;"
psql -d template_postgis -c "VACUUM FREEZE;"

info_msg 'Allow non-superusers the ability to create from this template'
psql -d postgres -c "UPDATE pg_database SET datistemplate='true' WHERE datname='template_postgis';"
psql -d postgres -c "UPDATE pg_database SET datallowconn='false' WHERE datname='template_postgis';"

info_msg 'Create a spatially-enabled database named endpoint'
createdb endpoint -T template_postgis

info_msg "Kill postgresql server"
kill $postgres_pid
